{"version":3,"file":"static/js/775.8702eef5.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectFilterContacts,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport {\n  Button,\n  SimpleGrid,\n  Stack,\n  Text,\n  useColorMode,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const filterContacts = useSelector(selectFilterContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  if (!filterContacts?.length) {\n    return <p>No contacts found.</p>;\n  }\n\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <SimpleGrid\n        columns={[1, 2, 3, 5]}\n        spacing={[2, 2, 4, 6]}\n        alignItems=\"center\"\n        py={4}\n      >\n        {filterContacts.map(contact => {\n          return (\n            <Stack\n              key={contact.id}\n              spacing=\"2\"\n              p=\"2\"\n              _hover={\n                colorMode === 'dark'\n                  ? { shadow: 'outline' }\n                  : { shadow: 'dark-lg' }\n              }\n              borderRadius=\"4px\"\n              border={colorMode === 'dark' ? '1px' : '2px'}\n              borderColor={colorMode === 'dark' ? 'gray.600' : 'gray.200'}\n            >\n              <Text isTruncated> {contact.name}</Text>\n              <Text isTruncated> tel: {contact.number}</Text>\n\n              <Button\n                as=\"a\"\n                variant=\"solid\"\n                type=\"button\"\n                cursor=\"pointer\"\n                onClick={() => onDeleteContact(contact.id)}\n              >\n                Delete\n              </Button>\n            </Stack>\n          );\n        })}\n      </SimpleGrid>\n    </>\n  );\n};\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\nimport * as Yup from 'yup';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .matches(/^[a-zA-Zа-яА-Я]+$/, 'Name should contain only letters')\n      .min(3, 'Enter a name from 3 to 50 letters!')\n      .max(50, 'Enter a name from 3 to 50 letters!')\n      .required('Necessarily'),\n    number: Yup.string()\n      .matches(/^[0-9]+$/, 'Number should contain only digits')\n      .min(5, 'Number not less than 5 digits and not more than 20 digits!')\n      .max(20, 'Number not less than 5 digits and not more than 20 digits!')\n      .required('Necessarily'),\n  });\n\n  const handleSubmit = (values, actions) => {\n    const newContact = {\n      id: nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n\n    if (contacts.find(contact => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n      actions.resetForm();\n    }\n  };\n\n  return (\n    <Container py={4} maxW=\"container.sm\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {props => (\n          <Form>\n            <FormControl\n              py={4}\n              isInvalid={props.errors.name && props.touched.name}\n              id=\"name\"\n            >\n              <FormLabel>Name:</FormLabel>\n              <Field\n                as={Input}\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Name\"\n              />\n              <ErrorMessage name=\"name\" component={FormErrorMessage} />\n            </FormControl>\n\n            <FormControl\n              py={4}\n              isInvalid={props.errors.number && props.touched.number}\n              id=\"number\"\n            >\n              <FormLabel>Number:</FormLabel>\n              <Field\n                as={Input}\n                type=\"tel\"\n                id=\"number\"\n                name=\"number\"\n                placeholder=\"Number\"\n              />\n              <ErrorMessage name=\"number\" component={FormErrorMessage} />\n            </FormControl>\n\n            <Button type=\"submit\" mt={4}>\n              Add contact\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n","import { setFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectStatusFilter } from 'redux/selectors';\nimport { Container, FormLabel, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n  return (\n    <Container py={4} maxW=\"container.sm\">\n      <FormLabel>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          onChange={event => dispatch(setFilter(event.target.value.trim()))}\n          value={filter}\n          name=\"filter\"\n          id=\"filter\"\n        />\n      </FormLabel>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport { Container } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxW=\"container.xl\">\n      <ContactForm />\n      <Filter />\n      <title>Contacts</title>\n      {isLoading && 'Stand by, loading in progress...'}\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilterContacts","createSelector","name","toLowerCase","includes","ContactList","filterContacts","useSelector","dispatch","useDispatch","colorMode","useColorMode","useEffect","fetchContacts","length","columns","spacing","alignItems","py","map","contact","p","_hover","shadow","borderRadius","border","borderColor","isTruncated","number","as","variant","type","cursor","onClick","id","deleteContact","ContactForm","validationSchema","Yup","shape","matches","min","max","required","maxW","initialValues","onSubmit","values","actions","newContact","nanoid","find","alert","addContact","resetForm","props","isInvalid","errors","touched","Input","placeholder","component","FormErrorMessage","mt","Filter","I","onChange","event","setFilter","target","value","trim","Contacts"],"sourceRoot":""}