{"version":3,"file":"static/js/16.d5cb4e10.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register/Register.js","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(register(formData));\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <Container\n      maxW=\"container.sm\"\n      my={6}\n      py={6}\n      border=\"2px\"\n      borderRadius=\"4px\"\n    >\n      <FormControl as=\"form\" onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Username\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          Email\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          Password\n          <Input\n            type=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n        <Button type=\"submit\">Register</Button>\n      </FormControl>\n    </Container>\n  );\n};\n","import { Container } from '@chakra-ui/react';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <Container maxW=\"container.xl\" py={2}>\n      <title>Registration</title>\n      <RegisterForm />\n    </Container>\n  );\n}\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["RegisterForm","dispatch","useDispatch","useState","name","email","password","formData","setFormData","handleInputChange","e","target","value","prevState","maxW","my","py","border","borderRadius","as","onSubmit","preventDefault","register","autoComplete","I","type","onChange","Register","styles","useStyleConfig","className","children","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","rest","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","chakra","__css","display","ref","omitThemingProps","FormLabel","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","forwardRef","createContext","errorMessage","FormControlStylesProvider","strict","FormControlProvider","useFormControlProvider","idProp","context","useMultiStyleConfig","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","onFocus","onBlur","FormControl","props","div","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","required","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","size","Input"],"sourceRoot":""}